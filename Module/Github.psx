using Dir = System.IO.Directory;

class RepoInfo {
	function RepoInfo(Name, Owner, Channel, Token) {
		this.Name = Name;
		this.Owner = Owner;
		this.Channel = Channel;

		if (Token)
			this.AccessToken = Token;
	}
}

class Poly.Bot.Github : Poly.Bot.Module {
	function Github() {
		this.Module("Github");
		
		this.AccessToken = ;
		this.CommitTemplate = 'Commit by {commit.author.name}, {sha}\r\n{commit.message}';

		this.NewIssueTemplate = 'New issue {title} by {user.login} is currently {state}\r\n{body}';
		this.IssueUpdateTemplate = 'Issue {title} by {user.login} is now {state}!';
	}

	function Init(Bot) {
		if (!Bot.GithubConfigPath) {
			Log.Error('No GithubConfigPath specified for ' + Bot.Ident);
			return;
		}

		if (!Dir.Exists(Bot.GithubConfigPath)){
			Dir.CreateDirectory(Bot.GithubConfigPath);
		}

		Bot.GithubConfig = Load(Bot.GithubConfigPath + 'Repos.json');

		if (!Bot.GithubConfig) {
			Bot.GithubConfig = [ ];
			this.SaveConfig(Bot);
		}

		Bot.On('Connected', this.InitLoop);

		Cmd = this.GetHandler("Cmd");
		Cmd.On('!git->add {Owner} {Repo} {Target}', this.AddRepo);
	}

	function SaveConfig(Bot) {
		if (!Bot.GithubConfigPath) {
			Log.Error('No GithubConfigPath specified for ' + Bot.Ident);
			return;
		}
		
		if (!Dir.Exists(Bot.GithubConfigPath)){
			Dir.CreateDirectory(Bot.GithubConfigPath);
		}

		Bot.GithubConfig.Save(Bot.GithubConfigPath + 'Repos.json');
	}
	
	function Poll(Url, AccessToken, Heads) {
		Headers = { 'User-Agent': 'Poly.Bot.Github' };

		if (AccessToken) {
			Headers.Authorization = 'token ' + AccessToken;
		}

		if (Heads) {
			Heads.CopyTo(Headers);
		}

		Url = Http.Escape(Url);
		try {
			Result = Http.Get('https://api.github.com' + Url, Headers);
			Result = Result.ToObject();
		}

		return Result;
	}

	function PollCommits(Owner, Repo, AccessToken) {
		Result = this.Poll('/repos/' + Owner + '/' + Repo + '/commits', AccessToken);
		return Result;
	}

	function PollNewCommits(Owner, Repo, AccessToken, Since) {
		Result = this.Poll('/repos/' + Owner + '/' + Repo + '/commits?since=' + Since, AccessToken);
		return Result;
	}
	
	function PollIssues(Owner, Repo, AccessToken) {
		Result = this.Poll('/repos/' + Owner + '/' + Repo + '/issues', AccessToken);
		return Result;
	}

	function PollOpenIssues(Owner, Repo, AccessToken, Since) {
		Result = this.Poll('/repos/' + Owner + '/' + Repo + '/issues?state=open&since=' + Since, AccessToken);
		return Result;
	}

	function PollClosedIssues(Owner, Repo, AccessToken, Since) {
		Result = this.Poll('/repos/' + Owner + '/' + Repo + '/issues?state=closed&since=' + Since, AccessToken);
		return Result;
	}

	function DoPollingLoop(Bot) {
		while (Bot.Connected) {
			foreach (Repo in Bot.GithubConfig) {
				Repo = Repo.Value;
				RepoPath = this.GetRepoPath(Bot, Repo);

				if (Repo.LastPollTime) {		
					Commits = this.PollNewCommits(Repo.Owner, Repo.Name, Repo.AccessToken, Repo.LastPollTime);

					if (Commits) {
						foreach (Item in Commits) {
							Bot.SendMessage(Repo.Channel, Item.Value.Template(this.CommitTemplate));						
						}
					}		

					NewIssues = this.PollOpenIssues(Repo.Owner, Repo.Name, Repo.AccessToken, Repo.LastPollTime);

					if (NewIssues) {
						foreach (Item in NewIssues){
							Bot.SendMessage(Repo.Channel, Item.Value.Template(this.NewIssueTemplate));
						}
					}

					ClosedIssues = this.PollClosedIssues(Repo.Owner, Repo.Name, Repo.AccessToken, Repo.LastPollTime);

					if (ClosedIssues) {
						foreach (Item in ClosedIssues){
							Bot.SendMessage(Repo.Channel, Item.Value.Template(this.IssueUpdateTemplate));
						}
					}
				}

				Repo.LastPollTime = Time.UtcNow.ToString('yyyy-MM-ddTHH:mm:ssK');
				this.SaveConfig(Bot);
			}

			Sleep(30000);
		}
	}

	function InitLoop() {
		Mod = GetModule('Github');
		async Mod.DoPollingLoop(this);
	}

	function AddRepo() {
		Mod = GetModule('Github');
		Info = RepoInfo(Repo, Owner, Target);

		this.GithubConfig + Info.ToObject();
		Mod.SaveConfig(this);
	}
}